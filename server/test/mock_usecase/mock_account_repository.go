// Code generated by MockGen. DO NOT EDIT.
// Source: ./usecase/account_repository.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	gomock "github.com/golang/mock/gomock"
	domain "github.com/kindaidensan/UMR/domain"
	reflect "reflect"
)

// MockAccountRepository is a mock of AccountRepository interface
type MockAccountRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAccountRepositoryMockRecorder
}

// MockAccountRepositoryMockRecorder is the mock recorder for MockAccountRepository
type MockAccountRepositoryMockRecorder struct {
	mock *MockAccountRepository
}

// NewMockAccountRepository creates a new mock instance
func NewMockAccountRepository(ctrl *gomock.Controller) *MockAccountRepository {
	mock := &MockAccountRepository{ctrl: ctrl}
	mock.recorder = &MockAccountRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAccountRepository) EXPECT() *MockAccountRepositoryMockRecorder {
	return m.recorder
}

// TemporaryStore mocks base method
func (m *MockAccountRepository) TemporaryStore(arg0 domain.Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TemporaryStore", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// TemporaryStore indicates an expected call of TemporaryStore
func (mr *MockAccountRepositoryMockRecorder) TemporaryStore(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TemporaryStore", reflect.TypeOf((*MockAccountRepository)(nil).TemporaryStore), arg0)
}

// FindByIdFromTemporary mocks base method
func (m *MockAccountRepository) FindByIdFromTemporary(arg0 string) (domain.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByIdFromTemporary", arg0)
	ret0, _ := ret[0].(domain.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByIdFromTemporary indicates an expected call of FindByIdFromTemporary
func (mr *MockAccountRepositoryMockRecorder) FindByIdFromTemporary(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByIdFromTemporary", reflect.TypeOf((*MockAccountRepository)(nil).FindByIdFromTemporary), arg0)
}

// Store mocks base method
func (m *MockAccountRepository) Store(arg0 domain.Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store
func (mr *MockAccountRepositoryMockRecorder) Store(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockAccountRepository)(nil).Store), arg0)
}
